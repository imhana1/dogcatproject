-- 1. user_member : 다른 테이블들이 참조하는 가장 기본 테이블
CREATE TABLE user_member (
	username varchar2(10) NOT NULL,
	password varchar2(70) NULL,
	role varchar2(10) NULL,
	status varchar2(15) NULL,
	e_code varchar2(20) NULL,
	email varchar2(30) Null,
	count number(1) NULL,
	sign_dt date NULL,
	is_locked number(1) NULL,
	CONSTRAINT PK_USER_MEMBER PRIMARY KEY (username)
);

-- 2. normal_member : user_member 참조 상세 주소 추가
CREATE TABLE normal_member (
	n_username varchar2(10) NOT NULL,
	n_name varchar2(30) NULL, 길이 30으로 수정
	zip number(10) null, -- 우편번호
	n_address varchar2(100) NULL, -- 길이 100으로 수정
	n_tel varchar2(15) NULL,
	n_birthday date NULL,
	n_location number(25,15) NULL,
	n_longitude number(25,15) NULL,
	n_subaddress varchar2(100) NULL, -- 상세 주소
	CONSTRAINT PK_normal_member PRIMARY KEY (n_username),
	CONSTRAINT FK_user_member_TO_normal_member_1 FOREIGN KEY (n_username) REFERENCES user_member (username)
);

-- 3. hospital_member : user_member 참조 상세 주소 추가
CREATE TABLE hospital_member (
	h_username varchar2(10) NOT NULL,
	director varchar2(10)  NULL,
	hospital varchar2(70) NULL, -- varchar2 길이 70으로 수정
	h_tel varchar2(15) NULL,
	h_reptel varchar2(15) NULL,
	zip number(10) null, -- 우편번호
	h_address varchar2(100) NULL, -- 길이 100으로 수정
	h_choice number(1) NULL,
	h_profile clob NULL,
	h_location number(25,15) NULL,
	h_longitude number(25,15) NULL,
	open_time varchar2(15) NULL,
	close_time varchar2(15) NULL,
	d_profile clob NULL,
	h_birthday date NULL,
	h_Introduction varchar2(1000) NULL,
	educational varchar2(200) NULL,
	h_subaddress varchar2(100) NULL, -- 상세 주소
	CONSTRAINT PK_HOSPITAL_MEMBER PRIMARY KEY (h_username),
	CONSTRAINT FK_user_member_TO_hospital_member_1 FOREIGN KEY (h_username) REFERENCES user_member (username)
);

-- 4. adoption : user_member 참조 (0626: a_gender 추가)
CREATE TABLE adoption (
	ano number(10) NOT NULL,
	a_profile clob NULL,
	a_name varchar2(10) NULL,
	a_age number(5) NULL,
	a_gender varchar2(10) NULL,
	a_breed varchar2(10) NULL,
	a_city varchar2(50) NULL,
	a_location varchar2(50) NULL,
	a_found_location varchar2(50) NULL,
	username varchar2(10) NOT NULL,
	a_write_day date NULL,
	a_content varchar2(1000) NULL,
	a_is_adopted number(1) NULL,
	CONSTRAINT PK_ADOPTION PRIMARY KEY (ano),
	CONSTRAINT FK_user_member_TO_adoption_1 FOREIGN KEY (username) REFERENCES user_member (username)
);

-- 5. pet : normal_member 참조
CREATE TABLE pet (
	pno number(10) NOT NULL,
	n_username varchar2(10) NOT NULL,
	animal_types varchar2(10) NULL,
	microchipped varchar2(10) NULL, --varchar2(10)으로 변경
	breed varchar2(10) NULL,
	p_name varchar2(10) NULL,
	p_age date NULL, -- 날짜로 변경
	p_weight varchar2(10) NULL, -- varchar2(10)으로 변경
	has_allergies varchar2(10) NULL, -- varchar2(10) 으로 변경
	has_insurance varchar2(10) NULL, -- varchar2(10) 으로 변경
	p_profile clob NULL,
	illness_name varchar2(10) NULL,
	surgery_name varchar2(10) NULL,
	CONSTRAINT PK_PET PRIMARY KEY (pno, n_username),
	CONSTRAINT FK_normal_member_TO_pet_1 FOREIGN KEY (n_username) REFERENCES normal_member (n_username)
);


-- 7. reservation : normal_member, hospital_member, pet 참조 s_id 추가
CREATE TABLE reservation (
	rno number(10) NOT NULL,
	n_username varchar2(10) NOT NULL,
	schedule date NULL,
	h_username varchar2(10) NOT NULL,
	pno number(10) NOT NULL,
	r_status varchar2(10) NULL,
	s_id number(10) NULL,
	CONSTRAINT PK_RESERVATION PRIMARY KEY (rno),
	CONSTRAINT FK_normal_member_TO_reservation_1 FOREIGN KEY (n_username) REFERENCES normal_member (n_username),
	CONSTRAINT FK_hospital_member_TO_reservation_1 FOREIGN KEY (h_username) REFERENCES hospital_member (h_username),
	CONSTRAINT FK_pet_TO_reservation_1 FOREIGN KEY (pno, n_username) REFERENCES pet (pno, n_username)
);

-- treat : rno를 참조 해야 해서 reservation이 생성된 후에 생성 가능
CREATE TABLE treat (
    tno         NUMBER(10)      NOT NULL,                 -- 진료결과 번호
    rno         NUMBER(10)      NOT NULL,                 -- 예약번호
    t_writer    VARCHAR2(10)    NOT NULL,                 -- 작성자 (의사 ID)
    t_content   VARCHAR2(1000),                           -- 진료 내용
    t_title     VARCHAR2(100),                            -- 진료 제목
    n_username  VARCHAR2(10),                             -- 환자 ID (일반 회원)

    CONSTRAINT pk_treat PRIMARY KEY (tno, rno),           -- 복합 기본키
    CONSTRAINT fk_treat_rno FOREIGN KEY (rno)
        REFERENCES reservation(rno)
        ON DELETE CASCADE,
    CONSTRAINT fk_treat_n_username FOREIGN KEY (n_username)
        REFERENCES normal_member(n_username)
        ON DELETE CASCADE,
    CONSTRAINT fk_treat_writer FOREIGN KEY (t_writer)
        REFERENCES hospital_member(h_username)
        ON DELETE CASCADE
);


-- 8. pay : reservation, hospital_member, normal_member 참조
CREATE TABLE pay (
                     rno number(10) NOT NULL,           -- 예약 번호
                     h_username varchar2(10) NOT NULL,  -- 병원 아이디
                     n_username varchar2(10) NOT NULL,  -- 고객 아이디
                     order_no varchar2(200) NOT NULL,   -- 주문번호
                     payment_key varchar2(64) NOT NULL, -- 결제 요청 후 떨어지는 키
                     p_username varchar2(10) NULL,      -- 결제자 이름
                     product_desc varchar2(100) NULL,   -- 결제명
                     amount number(10) NULL,            -- 결제 가격
                     amount_tax_free number(10) NULL,   -- 비과세
                     auto_execute number(2) NULL,       -- 자동 승인 설정
                     result_callback varchar2 (200),    -- 결제 결과 CallbackURL
                     ret_url varchar2 (200),            -- 인증 완료 후 연결할 URL
                     ret_cancel_url varchar2 (200),     -- 결제 중단 시 사용자를 이동시킬 홈페이지
                     p_status varchar2(20),             -- 결제 상태
                     CONSTRAINT PK_PAY PRIMARY KEY (rno, h_username, n_username),
                     CONSTRAINT FK_reservation_TO_pay_1 FOREIGN KEY (rno) REFERENCES reservation (rno),
                     CONSTRAINT FK_hospital_member_TO_pay_1 FOREIGN KEY (h_username) REFERENCES hospital_member (h_username),
                     CONSTRAINT FK_normal_member_TO_pay_1 FOREIGN KEY (n_username) REFERENCES normal_member (n_username)
);


-- 10. schedule : hospital_member 참조 기본키 s_id 추가 미용 시간과 진료 시간을 구분하기 위한 기본키
CREATE TABLE schedule (
	s_id number(10) NOT NULL,
	schedule date NOT NULL,
	h_username varchar2(10) NOT NULL,
	block_status number(1) NULL,
	h_notice varchar2(100) NULL,
	s_choice varchar2(10) NULL,
	CONSTRAINT PK_SCHEDULE PRIMARY KEY (s_id , schedule, h_username),
	CONSTRAINT FK_hospital_member_TO_schedule_1 FOREIGN KEY (h_username) REFERENCES hospital_member (h_username)
);

-- 11. wish_list : adoption, user_member 참조
CREATE TABLE wish_list (
	ano number(10) NOT NULL,
	username varchar2(10) NOT NULL,
	CONSTRAINT PK_WISH_LIST PRIMARY KEY (ano, username),
	CONSTRAINT FK_adoption_TO_wish_list_1 FOREIGN KEY (ano) REFERENCES adoption (ano),
	CONSTRAINT FK_user_member_TO_wish_list_1 FOREIGN KEY (username) REFERENCES user_member (username)
);


-- 14. wish : adoption, user_member 참조
CREATE TABLE wish (
	ano number(10) NOT NULL,
	username varchar2(10) NOT NULL,
	CONSTRAINT PK_WISH PRIMARY KEY (ano, username),
	CONSTRAINT FK_adoption_TO_wish_1 FOREIGN KEY (ano) REFERENCES adoption (ano),
	CONSTRAINT FK_user_member_TO_wish_1 FOREIGN KEY (username) REFERENCES user_member (username)
);

-- 15. qna_question : user_member 참조 (0703.thu 수정)
CREATE TABLE qna_question (
	qno number(10) NOT NULL,
	q_title varchar2(50) NULL,
	username varchar2(10) NOT NULL,
	q_write_day date NULL,
	q_content varchar2(1000) NULL,
	q_is_answered number(1) NULL,
	q_image VARCHAR2(255) NULL,
	CONSTRAINT PK_QNA_QUESTION PRIMARY KEY (qno),
	CONSTRAINT FK_user_member_TO_qna_question_1 FOREIGN KEY (username) REFERENCES user_member (username)
);

-- 16. qna_answer : qna_question, user_member 참조
CREATE TABLE qna_answer (
	qno number(10) NOT NULL,
	username varchar2(10) NOT NULL,
	answer_write_day date NULL,
	answer_content varchar2(1000) NULL,
	CONSTRAINT PK_QNA_ANSWER PRIMARY KEY (qno),
	CONSTRAINT FK_qna_question_TO_qna_answer_1 FOREIGN KEY (qno) REFERENCES qna_question (qno),
	CONSTRAINT FK_user_member_TO_qna_answer_1 FOREIGN KEY (username) REFERENCES user_member (username)
);

-- 17. review : reservation, user_member, hospital_member 참조
CREATE TABLE review (
	rev_no number(10) NOT NULL,
	rno number(10) NOT NULL,
	rev_writer varchar2(10) NOT NULL,
	write_day date NULL,
	rev_content varchar2(1000) NULL,
	h_username varchar2(10) NOT NULL,
	CONSTRAINT PK_REVIEW PRIMARY KEY (rev_no),
	CONSTRAINT FK_reservation_TO_review_1 FOREIGN KEY (rno) REFERENCES reservation (rno),
	CONSTRAINT FK_user_member_TO_review_1 FOREIGN KEY (rev_writer) REFERENCES user_member (username),
	CONSTRAINT FK_hospital_member_TO_review_1 FOREIGN KEY (h_username) REFERENCES hospital_member (h_username)
);

-- 18. notice : user_member 참조
CREATE TABLE notice (
	nno number(10) NOT NULL,
	n_title varchar2(50) NULL,
	username varchar2(10) NOT NULL,
	n_write_day date NULL,
	n_content varchar2(1000) NULL,
	n_is_top number(1) NULL,
	CONSTRAINT PK_NOTICE PRIMARY KEY (nno),
	CONSTRAINT FK_user_member_TO_notice_1 FOREIGN KEY (username) REFERENCES user_member (username)
);


alter table schedule rename COLUMN h_notice to s_notice;
alter table review rename column write_day to rev_write_day;
alter table pet rename column breed to p_breed;
-- uniq 제약 설정
alter table reservation add constraint uniq_reservation_schedule UNIQUE (schedule, h_username);

-- uniq 설정 됐는지 확인
select constraint_name, constraint_type from USER_CONSTRAINTS where TABLE_NAME='RESERVATION';


CREATE INDEX idx_schedule_search ON schedule(h_username, schedule, s_choice);
--alter table hospital_member modify(h_address varchar2(50));
--alter table user_member modify(status varchar2(10));
--alter table user_member modify(role varchar2(10));
--alter table hospital_member modify(h_location number(25,15));
--alter table hospital_member modify(h_longitude number(25,15));


create sequence schedule_seq;
create sequence treat_seq;
create sequence notice_seq;
create sequence qna_question_seq;
create sequence qna_answer_seq;
create sequence adoption_seq;
create sequence reservation_seq;
create sequence review_seq;
create sequence pet_seq;
create sequence surgical_history_seq;
create sequence chronic_illness_seq;
create sequence pay_seq;